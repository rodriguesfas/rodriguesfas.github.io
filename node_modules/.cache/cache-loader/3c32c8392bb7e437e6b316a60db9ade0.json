{"remainingRequest":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/docs/robotics/sbotics/seguidor-de-linha.md","dependencies":[{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/docs/robotics/sbotics/seguidor-de-linha.md","mtime":1644496754661},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-robotics-sbotics-seguidor-de-linha-md-0f3.json","mtime":1644496771093},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1644465007939},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/babel-loader/lib/index.js","mtime":1644465009559},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1644465008051},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1644465011591}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}