{"remainingRequest":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/docs/robotics/sbotics/seguidor-de-linha.md","dependencies":[{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/docs/robotics/sbotics/seguidor-de-linha.md","mtime":1644496754661},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-robotics-sbotics-seguidor-de-linha-md-0f3.json","mtime":1644496771093},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1644465007939},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/babel-loader/lib/index.js","mtime":1644465009559},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1644465008051},{"path":"/home/rodriguesfas/Workspace/fasr/rodriguesfas.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1644465011591}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvcm9kcmlndWVzZmFzL1dvcmtzcGFjZS9mYXNyL3JvZHJpZ3Vlc2Zhcy5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXt9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJyb2JvdGljcy9zYm90aWNzL3NlZ3VpZG9yLWRlLWxpbmhhIiwiaWQiOiJyb2JvdGljcy9zYm90aWNzL3NlZ3VpZG9yLWRlLWxpbmhhIiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6InNlZ3VpZG9yLWRlLWxpbmhhIiwiZGVzY3JpcHRpb24iOiJTZWd1aWRvciBkZSBMaW5oYSIsInNvdXJjZSI6IkBzaXRlL2RvY3Mvcm9ib3RpY3Mvc2JvdGljcy9zZWd1aWRvci1kZS1saW5oYS5tZCIsInNsdWciOiIvcm9ib3RpY3Mvc2JvdGljcy9zZWd1aWRvci1kZS1saW5oYSIsInBlcm1hbGluayI6Ii9kb2NzL3JvYm90aWNzL3Nib3RpY3Mvc2VndWlkb3ItZGUtbGluaGEiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RvY3VzYXVydXMvZWRpdC9tYXN0ZXIvd2Vic2l0ZS9kb2NzL3JvYm90aWNzL3Nib3RpY3Mvc2VndWlkb3ItZGUtbGluaGEubWQiLCJ2ZXJzaW9uIjoiY3VycmVudCJ9Oy8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi8gLyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgdG9jPVtdO2NvbnN0IGxheW91dFByb3BzPXt0b2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCxgU2VndWlkb3IgZGUgTGluaGEKI1NlZ3VpZG9yIGRlIGxpbmhhIDEKU2VndWUgbGluaGEgcGFyYSBmcmVudGUuYCksbWR4KCJwIixudWxsLGBDdXJ2YXMgZGUgMTgwwrogcGFyYSBlc3F1ZXJkYSBlIGRpcmVpdGEuYCksbWR4KCJwIixudWxsLGBTdXBlcmEgZ3VlcHMuYCksbWR4KCJwIixudWxsLGBTdXBlcmEgcmVkdXRvciBkZSB2ZWxvY2lkYWRlLmApLG1keCgicCIsbnVsbCxgICBudW1lcm8gc2Vuc29yRXNxMSA9IDAKbnVtZXJvIHNlbnNvckVzcTIgPSAwCm51bWVybyBzZW5zb3JEaXIxID0gMApudW1lcm8gc2Vuc29yRGlyMiA9IDBgKSxtZHgoInAiLG51bGwsYCAgbnVtZXJvIGxpbWlhciA9IDI0YCksbWR4KCJwIixudWxsLGAgIHRhcmVmYSBjaWNsb3sKZW5xdWFudG8gKHZlcmRhZGVpcm8pIGZhcmVpewplc2NyZXZlcm51bWVybygxLCBsdXooMikpCmVzY3JldmVybnVtZXJvKDIsIGx1eigzKSkKZXNjcmV2ZXJudW1lcm8oMywgbHV6KDQpKWApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIse3BhcmVudE5hbWU6InByZSJ9LGAgIHNlIChsdXooMik+bGltaWFyIGUgbHV6KDMpPGxpbWlhciBlIGx1eig0KT5saW1pYXIpIGVudGFvIHsKICAgICAgZnJlbnRlKDIwMCkKICB9c2VuYW8gc2UgKGx1eigyKT5saW1pYXIgZSBsdXooNCk+bGltaWFyKSBlbnRhb3sKICAgICAgZnJlbnRlKDEwMCkKICB9c2VuYW8gc2UobHV6KDIpPGxpbWlhcikgZW50YW97CiAgICAgIG1vdmVyKG5lZ2F0aXZvKDEwMCksIDEwMCkKICAgICAgZXNwZXJhcigxMDApCiAgfXNlbmFvIHNlKGx1eig0KTxsaW1pYXIpIGVudGFvewogICAgICBtb3ZlcigxMDAsIG5lZ2F0aXZvKDEwMCkpCiAgICAgIGVzcGVyYXIoMTAwKSAgICAgIAogIH0KYCkpLG1keCgicCIsbnVsbCxgICB9Cn1gKSxtZHgoInAiLG51bGwsYCAgaW5pY2lvCmNpY2xvKClgLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLGAKYCxgZmltCiNTZWd1aWRvciBkZSBsaW5oYSAyCkxldmFudGEgZXNjYXZhZGVpcmEgYW8gaW5pY2lhci5gKSxtZHgoInAiLG51bGwsYFNlZ3VlIGxpbmhhIHBhcmEgZnJlbnRlLmApLG1keCgicCIsbnVsbCxgQ3VydmFzIGRlIDE4MMK6IHBhcmEgZXNxdWVkYSBlIGRpcmVpYS5gKSxtZHgoInAiLG51bGwsYEN1cnZhcyBkZSA5MMK6IHBhcmEgZXNxdWVkYSBlIGRpcmVpdGEuYCksbWR4KCJwIixudWxsLGBEZXRlY3RhIG9ic3TDoWN1bG8uYCksbWR4KCJwIixudWxsLGBTdXBlcmEgZ3VlcHMuYCksbWR4KCJwIixudWxsLGBTdXBlcmEgcmVkdXRvciBkZSB2ZWxvY2lkYWRlLmApLG1keCgicCIsbnVsbCxgQmFpeGEgZXNjYXZhZGVpcmEgcXVhbmRvIHNvYmUgYSByYW1wYS5gKSxtZHgoInAiLG51bGwsYCAgbnVtZXJvIHNlbnNvckVzcTEgPSAwCm51bWVybyBzZW5zb3JEaXIxID0gMApudW1lcm8gc2Vuc29yRXNxMiA9IDAKbnVtZXJvIHNlbnNvckRpcjIgPSAwYCksbWR4KCJwIixudWxsLGAgIG51bWVybyBsaW1pYXIgPSAyMApudW1lcm8gdmFsMSA9IDAKbnVtZXJvIHZhbDIgPSAwCm51bWVybyBtdXQgPSAyYCksbWR4KCJwIixudWxsLGAgIGJvb2xlYW5vIGVzdGFuYXJhbXBhID0gZmFsc29gKSxtZHgoInAiLG51bGwsYCAgdGFyZWZhIGxldmFudGFyRXNjYXZhZGVpcmF7CnZlbG9jaWRhZGVhdHVhZG9yKDE1MCkKbGV2YW50YXIoMTAwMCkKfWApLG1keCgicCIsbnVsbCxgICB0YXJlZmEgYmFpeGFyRXNjYXZhZGVpcmF7CnZlbG9jaWRhZGVhdHVhZG9yKDUwKQpiYWl4YXIoMTAwMCkKfWApLG1keCgicCIsbnVsbCxgICB0YXJlZmEgc2VndWlkb3J7CnNlbnNvckVzcTEgPSBsdXooMikKc2Vuc29yRGlyMSA9IGx1eig0KQpzZW5zb3JFc3EyID0gbHV6KDEpCnNlbnNvckRpcjIgPSBsdXooNSlgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgICBzZSAoc2Vuc29yRXNxMSA+IGxpbWlhciBlIHNlbnNvckRpcjEgPiBsaW1pYXIpIGVudGFvIHsKICBmcmVudGUoNDApCiAgfXNlbmFvIHNlKHNlbnNvckVzcTEgPCBsaW1pYXIgZSBzZW5zb3JEaXIxID4gbGltaWFyIG91IGNvcigxKT09IlZFUkRFIiBvdSBjb3IoMik9PSJWRVJERSIpIGVudGFvIHsKICAgICAgc2UgKGNvcigxKSA9PSAiVkVSREUiIG91IGNvcigyKSA9PSAiVkVSREUiKSBlbnRhb3sKICAgICAgICAgIGZyZW50ZSgxMDApCiAgICAgICAgICBlc3BlcmFyKDYwMCkKICAgICAgICAgIAogICAgICAgICAgZW5xdWFudG8gKGx1eigzKSA+IGxpbWlhciApIGZhcmVpIHsKICAgICAgICAgICAgICBkaXJlaXRhKDEwMCkKICAgICAgICAgIH0KICAgICAgICAgIAogICAgICAgICAgdHJhcyg0MCkKICAgICAgICAgIGVzcGVyYXIgKDUwMCkKICAgICAgfQogICAgICBzZW5hbyBzZSAoc2Vuc29yRXNxMSA8IGxpbWlhciBlIHNlbnNvckVzcTIgPCBsaW1pYXIpIGVudGFvewogICAgICAgICAgZnJlbnRlKDE1MCkKICAgICAgICAgIGVzcGVyYXIoNjAwKQogICAgICAgICAgZGlyZWl0YSgyMDApCiAgICAgICAgICBlc3BlcmFyKDQwMDApCiAgICAgICAgICB0cmFzKDQwKQogICAgICAgICAgZXNwZXJhcig1MDApCiAgICAgIH0KICAgICAgc2VuYW97CiAgICAgICAgICB2YWwxID0gc3VidHJhaXIoc2Vuc29yRXNxMSwgc2Vuc29yRGlyMSkKICAgICAgICAgIHZhbDIgPSBtdWx0aXBsaWNhcih2YWwxLCBtdXQpCiAgICAgICAgICBtb3ZlcihuZWdhdGl2bygxMDApLCAxMDApCiAgICAgICAgICBlc3BlcmFyKHZhbDIpCiAgICAgIH0KICB9c2VuYW8gc2Uoc2Vuc29yRXNxMSA+IGxpbWlhciBlIHNlbnNvckRpcjEgPCBsaW1pYXIpIGVudGFvIHsKICAgICAgc2UgKGNvcig0KT09IlZFUkRFIiBvdSBjb3IoNSk9PSJWRVJERSIpIGVudGFvewogICAgICAgICAgZnJlbnRlKDEwMCkKICAgICAgICAgIGVzcGVyYXIoNjAwKQogICAgICAgICAgICAgIAogICAgICAgICAgZW5xdWFudG8gKGx1eigzKSA+IGxpbWlhciApIGZhcmVpIHsKICAgICAgICAgICAgICBlc3F1ZXJkYSgxMDApCiAgICAgICAgICB9CiAgICAgICAgICAKICAgICAgICAgIHRyYXMoNDApCiAgICAgICAgICBlc3BlcmFyKDUwMCkKICAgICAgfQogICAgICBzZW5hbyBzZSAoc2Vuc29yRGlyMSA8IGxpbWlhciBlIHNlbnNvckRpcjIgPCBsaW1pYXIpIGVudGFvewogICAgICAgICAgZnJlbnRlKDE1MCkKICAgICAgICAgIGVzcGVyYXIoNjAwKQogICAgICAgICAgZXNxdWVyZGEoMjAwKQogICAgICAgICAgZXNwZXJhcig0MDAwKQogICAgICAgICAgdHJhcyg0MCkKICAgICAgICAgIGVzcGVyYXIoNTAwKQogICAgICB9CiAgICAgIHNlbmFvewogICAgICAgICAgdmFsMSA9IHN1YnRyYWlyKHNlbnNvckVzcTEsIHNlbnNvckRpcjEpCiAgICAgICAgICB2YWwyID0gbXVsdGlwbGljYXIodmFsMSwgbXV0KQogICAgICAgICAgbW92ZXIoMTAwLCBuZWdhdGl2bygxMDApKQogICAgICAgICAgZXNwZXJhcih2YWwyKQogICAgICB9ICAgIAogIH0KYCkpLG1keCgicCIsbnVsbCxgICB9YCksbWR4KCJwIixudWxsLGAgIHRhcmVmYSBkZXN2aW8gewpzZSAodWx0cmEoMSk8OCkgZW50YW8gewpkaXJlaXRhKDEwMCkKZXNwZXJhcigzNTAwKQpmcmVudGUoMTAwKQplc3BlcmFyICgxMjAwKQplc3F1ZXJkYSgxMDApCmVzcGVyYXIgKDMwMDApCmZyZW50ZSgxNTApCmVzcGVyYXIgKDEyMDApCmVzcXVlcmRhKDIwMCkKZXNwZXJhciAoMzIwMClgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgICAgICAgZW5xdWFudG8gKGx1eiAoMSkgPiBsaW1pYXIgZSBsdXogKDIpID4gbGltaWFyKSBmYXJlaSB7CiAgICAgICAgICBmcmVudGUgKDIwKQogICAgICB9CgogICAgICBmcmVudGUgKDEwMCkKICAgICAgZXNwZXJhciAoNzAwKQogICAgICBkaXJlaXRhKDIwMCkKICAgICAgZXNwZXJhcigzMDAwKQogIH0KYCkpLG1keCgicCIsbnVsbCxgICB9YCksbWR4KCJwIixudWxsLGAgIHRhcmVmYSByZXNnYXRlRGlyZWl0YXtgKSxtZHgoInAiLG51bGwsYCAgfWApLG1keCgicCIsbnVsbCxgICB0YXJlZmEgcmVzZ2F0ZUVzcXVlcmRhe2ApLG1keCgicCIsbnVsbCxgICB9YCksbWR4KCJwIixudWxsLGAgIGluaWNpbwpsZXZhbnRhckVzY2F2YWRlaXJhKClgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLHtwYXJlbnROYW1lOiJwcmUifSxgICBlbnF1YW50byh2ZXJkYWRlaXJvKWZhcmVpewogIHNlKGluY2xpbmFjYW8oKT49MzAwIGUgdWx0cmEoMykgPCAyMiBlIHVsdHJhKDQpIDwgMjIgZSBlc3RhbmFyYW1wYSA9PSBmYWxzbykgZW50YW97CiAgICAgICAgICBlc3RhbmFyYW1wYSA9IHZlcmRhZGVpcm8KICAgICAgICAgIGJhaXhhckVzY2F2YWRlaXJhKCkKICAgICAgfQogICAgICAKICAgICAgc2UoZXN0YW5hcmFtcGEgPT0gZmFsc28pIGVudGFvewogICAgICAgICAgZGVzdmlvKCkKICAgICAgfQoKICAgICAgZXNjcmV2ZXJudW1lcm8oMSwgdWx0cmEoMykpCiAgICAgIGVzY3JldmVybnVtZXJvKDIsIHVsdHJhKDQpKQoKICAgICAgc2UodWx0cmEoMykgPiA3MCBlIHVsdHJhKDQpIDwgNDAgZSBlc3RhbmFyYW1wYSA9PSB2ZXJkYWRlaXJvKWVudGFvewogICAgICAgICAgZXNjcmV2ZXIoMywgIlBhcmVkZSDDoCBlc3F1ZXJkYSwgZmHDp2EgbyByZWdhdGUgcGFyYSBhIGRpcmVpdGEuIikKICAgICAgICAgIHJlc2dhdGVEaXJlaXRhKCkKICAgICAgfXNlbmFvIHNlKHVsdHJhKDQpID4gNzAgZSB1bHRyYSgzKSA8IDQwIGUgZXN0YW5hcmFtcGEgPT0gdmVyZGFkZWlybyllbnRhb3sKICAgICAgICAgIGVzY3JldmVyKDMsICJQYXJlZGUgw6AgZGllaXRhLCBmYcOnYSBvIHJlc2dhdGUgcGFyYSBhIGVzcXVlcmRhLiIpCiAgICAgICAgICByZXNnYXRlRXNxdWVyZGEoKQogICAgICB9CgogICAgICBzZWd1aWRvcigpCiAgfQpgKSksbWR4KCJwIixudWxsLGAgIGZpbQojQ3LDqWRpdG9zClByb2YuIEFsZXgKUHJvZi4gQXNzaXNgKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}